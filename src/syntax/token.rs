use interner::Symbol;

#[derive(Debug, PartialEq, Clone, Copy)]
pub enum Token {
    Bang,
    BitAnd,
    BitAndEq,
    BitOr,
    BitOrEq,
    BitXor,
    BitXorEq,
    BoolFalse,
    BoolTrue,
    BreakKeyword,
    CaseKeyword,
    CatchKeyword,
    CloseCurly,
    CloseParen,
    CloseSquare,
    Colon,
    Comma,
    Const,
    ContinueKeyword,
    DebuggerKeyword,
    DefaultKeyword,
    Delete,
    Div,
    DivEq,
    DoKeyword,
    Dot,
    Else,
    Eof,
    Eq,
    EqEq,
    EqEqEq,
    FinallyKeyword,
    FunctionKeyword,
    ForKeyword,
    Gt,
    Gte,
    Ident(Symbol),
    If,
    In,
    Instanceof,
    LShift,
    LShiftEq,
    LogicalAnd,
    LogicalOr,
    Lt,
    Lte,
    Minus,
    MinusEq,
    MinusMinus,
    Mod,
    ModEq,
    New,
    NotEq,
    NotEqEq,
    Null,
    Number(f64),
    OpenCurly,
    OpenParen,
    OpenSquare,
    Plus,
    PlusEq,
    PlusPlus,
    QuestionMark,
    RShift,
    RShiftEq,
    Return,
    Semi,
    String(Symbol),
    SwitchKeyword,
    ThisKeyword,
    ThrowKeyword,
    Tilde,
    Times,
    TimesEq,
    TryKeyword,
    Typeof,
    URShift,
    URShiftEq,
    Var,
    Void,
    WhileKeyword,
    WithKeyword,
}

use std::fmt;

impl fmt::Display for Token {
    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Token::Bang => write!(fmt, "!"),
            Token::BoolFalse => write!(fmt, "false"),
            Token::BoolTrue => write!(fmt, "true"),
            Token::CloseCurly => write!(fmt, "}}"),
            Token::CloseParen => write!(fmt, ")"),
            Token::CloseSquare => write!(fmt, "]"),
            Token::Comma => write!(fmt, ","),
            Token::Div => write!(fmt, "/"),
            Token::Dot => write!(fmt, "."),
            Token::If => write!(fmt, "if"),
            Token::In => write!(fmt, "in"),
            Token::Minus => write!(fmt, "-"),
            Token::Null => write!(fmt, "null"),
            Token::OpenCurly => write!(fmt, "{{"),
            Token::OpenParen => write!(fmt, "("),
            Token::Semi => write!(fmt, ";"),
            Token::Times => write!(fmt, "*"),
            ref t => write!(fmt, "{:?}", t)
        }
    }
}
